#!/bin/bash
# Debug version of vox with detailed error reporting

GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}üîç VOX DEBUG MODE${NC}"

# First, let's check if the Python packages are properly installed
echo -e "${BLUE}üì¶ Checking Python dependencies...${NC}"
python3 -c "
import sys
print(f'Python version: {sys.version}')
try:
    import faster_whisper
    print(f'‚úÖ faster-whisper version: {faster_whisper.__version__}')
except ImportError as e:
    print(f'‚ùå faster-whisper not found: {e}')
    
try:
    import soundfile
    print(f'‚úÖ soundfile version: {soundfile.__version__}')
except ImportError as e:
    print(f'‚ùå soundfile not found: {e}')
    
try:
    import numpy
    print(f'‚úÖ numpy version: {numpy.__version__}')
except ImportError as e:
    print(f'‚ùå numpy not found: {e}')
"

echo ""
echo -e "${BLUE}üé§ Starting recording test...${NC}"

# Cleanup old debug recordings first
find /tmp -name "vox_debug_*.wav" -type f -mmin +60 -delete 2>/dev/null || true

TEMP_FILE="/tmp/vox_debug_$(date +%s).wav"

# Test recording
echo -e "${YELLOW}Press ENTER when done speaking (recording for max 10 seconds)...${NC}"

if [[ "$OSTYPE" == "darwin"* ]]; then
    if command -v sox &> /dev/null; then
        echo "Using sox for recording..."
        timeout 10 sox -d -r 16000 -c 1 -b 16 "$TEMP_FILE" &
        REC_PID=$!
        read -n 1 -s
        kill $REC_PID 2>/dev/null
        wait $REC_PID 2>/dev/null
    else
        echo "Sox not found, using ffmpeg..."
        timeout 10 ffmpeg -f avfoundation -i ":0" -ar 16000 -ac 1 -acodec pcm_s16le "$TEMP_FILE" -y &
        REC_PID=$!
        read -n 1 -s
        kill $REC_PID 2>/dev/null
        wait $REC_PID 2>/dev/null
    fi
fi

# Check if file was created
if [[ ! -f "$TEMP_FILE" ]]; then
    echo -e "${RED}‚ùå Recording file not created${NC}"
    exit 1
fi

# Check file size
FILE_SIZE=$(stat -f%z "$TEMP_FILE" 2>/dev/null || stat -c%s "$TEMP_FILE" 2>/dev/null)
echo -e "${BLUE}üìÑ Recorded file: $TEMP_FILE (${FILE_SIZE} bytes)${NC}"

if [[ $FILE_SIZE -eq 0 ]]; then
    echo -e "${RED}‚ùå Recording file is empty${NC}"
    rm -f "$TEMP_FILE"
    exit 1
fi

# Test transcription with detailed error reporting
echo -e "${BLUE}üß† Testing transcription with detailed logging...${NC}"

# Use base64 encoding to safely pass the file path
TEMP_FILE_B64=$(echo -n "$TEMP_FILE" | base64)

KOSHI_VOX_TEMP_FILE="$TEMP_FILE_B64" python3 << 'EOF'
import sys
import os
import traceback
import base64

print("üîç Starting Python transcription debug...")

try:
    # Safely decode the file path
    temp_file_b64 = os.environ.get('KOSHI_VOX_TEMP_FILE', '')
    if not temp_file_b64:
        print("‚ùå No audio file specified in environment")
        sys.exit(1)
    
    temp_file = base64.b64decode(temp_file_b64.encode()).decode('utf-8')
    
    # Validate file path (must be in /tmp and exist)
    if not temp_file.startswith('/tmp/'):
        print("‚ùå Invalid audio file path - not in /tmp")
        sys.exit(1)
    
    print("üì¶ Importing modules...")
    from faster_whisper import WhisperModel
    import soundfile as sf
    import numpy as np
    print("‚úÖ All modules imported successfully")
    
    print("üîß Initializing Whisper model...")
    model = WhisperModel("tiny", device="cpu", compute_type="int8", cpu_threads=8)
    print("‚úÖ Model initialized successfully")
    
    print(f"üìÇ Loading audio file: {temp_file}")
    if not os.path.exists(temp_file):
        print("‚ùå Audio file doesn't exist!")
        sys.exit(1)
        
    file_size = os.path.getsize(temp_file)
    print(f"üìä File size: {file_size} bytes")
    
    try:
        audio, sr = sf.read(temp_file)
        print(f"‚úÖ Audio loaded: {len(audio)} samples at {sr}Hz")
        print(f"üìä Audio duration: {len(audio)/sr:.2f} seconds")
        print(f"üìä Audio range: {np.min(audio):.4f} to {np.max(audio):.4f}")
        
        if len(audio) == 0:
            print("‚ùå Audio array is empty!")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Failed to load audio: {e}")
        print("üîç Traceback:")
        traceback.print_exc()
        sys.exit(1)
    
    print("üéØ Starting transcription...")
    try:
        segments, info = model.transcribe(
            audio, 
            beam_size=1,
            language="en",
            condition_on_previous_text=False,
            vad_filter=True,
            vad_parameters=dict(min_silence_duration_ms=300)
        )
        
        print(f"‚úÖ Transcription completed")
        print(f"üìä Language: {info.language}")
        print(f"üìä Language probability: {info.language_probability:.2f}")
        
        text_segments = list(segments)
        print(f"üìä Number of segments: {len(text_segments)}")
        
        for i, segment in enumerate(text_segments):
            print(f"üéµ Segment {i+1}: '{segment.text}' ({segment.start:.2f}s - {segment.end:.2f}s)")
        
        final_text = " ".join([s.text for s in text_segments]).strip()
        
        if not final_text:
            print("‚ö†Ô∏è  No text was transcribed (empty result)")
        else:
            print(f"‚úÖ Final transcription: '{final_text}'")
            
    except Exception as e:
        print(f"‚ùå Transcription failed: {e}")
        print("üîç Traceback:")
        traceback.print_exc()
        sys.exit(1)
        
except Exception as e:
    print(f"‚ùå Critical error: {e}")
    print("üîç Traceback:")
    traceback.print_exc()
    sys.exit(1)

print("‚úÖ Debug completed successfully!")
EOF

echo ""
echo -e "${BLUE}üßπ Cleaning up...${NC}"
rm -f "$TEMP_FILE"
echo -e "${GREEN}Debug session complete!${NC}"